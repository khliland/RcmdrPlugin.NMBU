install.packages("Rcmdr")
library(RcmdrPlugin.NMBU)
library(RcmdrPlugin.NMBU)
library(micropan)
vignette(micropan)
vignette("micropan")
?micropan
?readClipboard
?read.table
library(RcmdrPlugin.NMBU)
auto.import
Commander()
library(RcmdrPlugin.NMBU)
Commander()
library("RcmdrPlugin.NMBU", lib.loc="C:/R/R-3.2.0/library")
print('''')
print('\'\'')
MAC <- Sys.info()[1] == "Darwin"
cl <- ifelse(MAC,"pipe(\'pspaste\')", "\'clipboard\'")
cl
cl
MAC
paste('Fisk(,cl,')')
)
paste('Fisk(',cl,')')
library(RcmdrPlugin.NMBU)
library(RcmdrPlugin.NMBU)
Sys.info()
Sys.info()[1]
syst <- Sys.info()[1]
if(syst=="Windows")print('Fisk')
library(RcmdrPlugin.NMBU)
rmsep
library(RcmdrPlugin.NMBU)
U <- available.packages("http://cran.r-project.org/src/contrib")
length(U)
?available.packages
U <- available.packages("http://cran.r-project.org/src/contrib/baseline")
U <- read.table(url('http://cran.r-project.org/src/contrib/PACKAGES'))
?read.table
U <- scan(url('http://cran.r-project.org/src/contrib/PACKAGES'))
U <- url('http://cran.r-project.org/src/contrib/PACKAGES')
U
close(U)
U <- url('http://cran.r-project.org/src/contrib/PACKAGES')
U
close(U)
U <- url('http://cran.r-project.org/src/contrib/PACKAGESl')
U
close(U)
O <- open(U <- url('http://cran.r-project.org/src/contrib/PACKAGES'))
O
close(U)
O <- open(U <- url('http://cran.r-project.org/src/contrib/PACKAGESl'))
O
O <- open(U <- url('http://cran.r-project.org/src/contrib/PACKAGES'))
close(O)
close(U)
U <- url('http://cran.r-project.org/src/contrib/PACKAGESl')
close(U)
rm(O)
O
exists("O")
U <- url('http://cran.r-project.org/src/contrib/PACKAGESl')
close(U)
O <- open(U <- url('http://cran.r-project.org/src/contrib/PACKAGES'))
exists("O")
O
O <- open(U <- url('http://cran.r-project.org/src/contrib/PACKAGES'))
close(U)
U <- url('http://cran.r-project.org/src/contrib/PACKAGES')
RL <- readLines(U)
close(U)
U <- url('http://cran.uib.org/src/contrib/PACKAGES')
RL <- readLines(U)
O <- open(U)
exists("O")
close(U)
unlist(strsplit(Sys.getenv("R_LIBS_USER"),.Platform$path.sep))
unlist(strsplit(Sys.getenv("R_LIBS"),.Platform$path.sep))
.Platform$path.sep
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
library(RcmdrPlugin.NMBU)
phia::testFactors
phia::testFactors.lm
phia:::testFactors.lm
phia:::print.testFactors
testInteractions(LinearModel.1, custom=list(leg=c(-1, 0, 0, 1)),
fixed=c('type','NA','type'), adjustment = 'none')
testInteractions()
phia::testInteractions()
RcmdrPlugin.NMBU:::testInteractions
library(RcmdrPlugin.NMBU)
library(Rcmdr)
library(phia)
??dmvnorm
library(devtools)
?vignette
?vignettes
use_vignette()
use_vignette("guide")
use_vignette("guide", pkg="RcmdrPlugin.NMBU")
getwd()
setwd("H:/Documents/Subversion/SVN/RcmdrPlugin.NMBU")
use_vignette("guide", pkg="RcmdrPlugin.NMBU")
use_vignette("guide", pkg=".")
library(RcmdrPlugin.NMBU)
vignette(package="RcmdrPlugin.NMBU")
vignette("RcmdrPlugin.NMBU")
library(RcmdrPlugin.NMBU)
library(RcmdrPlugin.NMBU)
install.packages("phia")
library(RcmdrPlugin.NMBU)
vignette(package=".")
vignette(package="RcmdrPlugin.NMBU")
vignette(guide, package="RcmdrPlugin.NMBU")
vignette("guide", package="RcmdrPlugin.NMBU")
help("nmbu")
rrrrrrrrrrrrrr()
hjelp()
library(RcmdrPlugin.NMBU)
hjelp()
library(RcmdrPlugin.NMBU)
library(devtools)
install.packages("devtools")
install.packages("roxygen2")
install.packages("knitr")
install.packages("pandoc")
devtools::build_vignettes()
library(devtools)
?devtools
install()
library(RcmdrPlugin.NMBU)
hjelp()
install()
hjelp()
check()
check(document = FALSE)
check(document = FALSE)
check(document = FALSE)
library(devtools)
check(document = FALSE)
?devtools
install()
library(RcmdrPlugin.NMBU)
traceback()
print(simple.glht(LinearModel.2,'V1:V2', level=0.95))
install()
print(simple.glht(LinearModel.2,'V1:V2', corr='Bonferroni', level=0.95))
print(simple.glht(LinearModel.2,'V1:V2', corr='Fisher', level=0.95))
traceback()
effect <- 'V1:V2'
grepl(":", effect)
mixlm:::TukeyFix(LinearModel.2,'V1:V2')
gT <- function(mod,effect,random, ...){
warn <- options("warn")
options(warn=-1)
if(grepl(":", effect)){
pro  <- sub(":", "*", effect)
prox <- sub(":", "_", effect)
cola <- sub(":", "",  effect)
spli <- unlist(strsplit(effect,":"))
data <- model.frame(mod)
eval(parse(text=paste("data$",prox," <- with(data, interaction(", paste(spli,collapse=",",sep=""),", sep=':'))")))
mod <- update(mod, formula(paste(".~-", pro, "+",prox)), data=data)
browser()
ret <- list()
if(random){
ret$res <- TukeyMix(mod,effect,level)
} else {
ret$res <- TukeyFix(mod,effect,level)
}
ret$model <- mod
} else {
ret <- list()
if(random){
ret$res <- TukeyMix(mod,effect,level)
ret$model <- mod
} else {
if(corr == "Tukey"){
ret$res <- TukeyFix(mod,effect,level)
ret$model <- mod
# ret$res <- TukeyFix(mod,effect,level)
# ret <- eval(parse(text=paste("glht(mod, linfct=mcp(",effect,"='Tukey'),...)")))
# ret$model <- mod
} else { # This will be overwritten.
ret <- eval(parse(text=paste("glht(mod, linfct=mcp(",effect,"='Tukey'),...)")))
}
}
}
options(warn=warn$warn)
ret
}
gT(LinearModel.2, 'V1:V2',FALSE)
mod
paste("data$",prox," <- with(data, interaction(", paste(spli,collapse=",",sep=""),", sep=':'))")
TukeyFix(mod,effect,level)
mixlm:::TukeyFix(mod,effect,level)
mixlm:::TukeyFix(mod,prox,level)
mixlm:::TukeyFix(mod,prox,0.95)
gT <- function(mod,effect,random, ...){
warn <- options("warn")
options(warn=-1)
if(grepl(":", effect)){
pro  <- sub(":", "*", effect)
prox <- sub(":", "_", effect)
cola <- sub(":", "",  effect)
spli <- unlist(strsplit(effect,":"))
data <- model.frame(mod)
eval(parse(text=paste("data$",prox," <- with(data, interaction(", paste(spli,collapse=",",sep=""),", sep=':'))")))
mod <- update(mod, formula(paste(".~-", pro, "+",prox)), data=data)
ret <- list()
if(random){
ret$res <- TukeyMix(mod,prox,level)
} else {
ret$res <- TukeyFix(mod,prox,level)
}
ret$model <- mod
} else {
ret <- list()
if(random){
ret$res <- TukeyMix(mod,effect,level)
ret$model <- mod
} else {
if(corr == "Tukey"){
ret$res <- TukeyFix(mod,effect,level)
ret$model <- mod
# ret$res <- TukeyFix(mod,effect,level)
# ret <- eval(parse(text=paste("glht(mod, linfct=mcp(",effect,"='Tukey'),...)")))
# ret$model <- mod
} else { # This will be overwritten.
ret <- eval(parse(text=paste("glht(mod, linfct=mcp(",effect,"='Tukey'),...)")))
}
}
}
options(warn=warn$warn)
ret
}
gT(LinearModel.2, 'V1:V2',FALSE)
gT <- function(mod,effect,random, ...){
warn <- options("warn")
options(warn=-1)
if(grepl(":", effect)){
pro  <- sub(":", "*", effect)
prox <- sub(":", "_", effect)
cola <- sub(":", "",  effect)
spli <- unlist(strsplit(effect,":"))
data <- model.frame(mod)
eval(parse(text=paste("data$",prox," <- with(data, interaction(", paste(spli,collapse=",",sep=""),", sep=':'))")))
mod <- update(mod, formula(paste(".~-", pro, "+",prox)), data=data)
ret <- list()
if(random){
ret$res <- TukeyMix(mod,prox,level)
} else {
ret$res <- mixlm:::TukeyFix(mod,prox,level)
}
ret$model <- mod
} else {
ret <- list()
if(random){
ret$res <- TukeyMix(mod,effect,level)
ret$model <- mod
} else {
if(corr == "Tukey"){
ret$res <- TukeyFix(mod,effect,level)
ret$model <- mod
# ret$res <- TukeyFix(mod,effect,level)
# ret <- eval(parse(text=paste("glht(mod, linfct=mcp(",effect,"='Tukey'),...)")))
# ret$model <- mod
} else { # This will be overwritten.
ret <- eval(parse(text=paste("glht(mod, linfct=mcp(",effect,"='Tukey'),...)")))
}
}
}
options(warn=warn$warn)
ret
}
gT(LinearModel.2, 'V1:V2',FALSE)
gT(LinearModel.2, 'V1:V2',FALSE, level=0.95)
level <- 0.95
gT(LinearModel.2, 'V1:V2',FALSE)
library(RcmdrPlugin.NMBU)
print(simple.glht(LinearModel.1,'V2:V3', level=0.95))
print(simple.glht(LinearModel.1,'V2:V3', corr='Bonferroni', level=0.95))
traceback()
library(RcmdrPlugin.NMBU)
traceback()
u <- simple.glht(LinearModel.2,'V2:V3', level=0.95)
cld(u)
traceback()
names(u)
simple.glht(LinearModel.2,'V2:V3', corr='Bonferroni', level=0.95)
traceback()
test(simple.glht(LinearModel.2,'V2:V3', corr='Bonferroni', level=0.95)
)
gT(LinearModel.2, 'V1:V2',FALSE)
source('~/.active-rstudio-document')
gT(LinearModel.2, 'V1:V2',FALSE)
summary(LinearModel.1)
gT(LinearModel.1, 'V1:V2',FALSE)
Anova(LinearModel.1)
Anova(LinearModel.2)
gT(LinearModel.2, 'V1:V2',FALSE)
gT(LinearModel.1, 'V1:V2',FALSE)
mod
summary(mod)
gT(LinearModel.1, 'V2:V3',FALSE)
level <- 0.95
gT(LinearModel.1, 'V2:V3',FALSE)
test(gT(LinearModel.1, 'V2:V3',FALSE))
adjusted(gT(LinearModel.1, 'V2:V3',FALSE),"bonferroni")
??adjusted
?adjusted
glht::adjusted(gT(LinearModel.1, 'V2:V3',FALSE),"bonferroni")
multcomp::adjusted(gT(LinearModel.1, 'V2:V3',FALSE),"bonferroni")
multcomp::adjusted(gT(LinearModel.1, 'V2:V3',FALSE))
library(multcomp)
?adjusted
test <- adjusted("bonferroni")
test(gT(LinearModel.1, 'V2:V3',FALSE))
u <- gT(LinearModel.1, 'V2:V3',FALSE)
vcov(u)
class(u)
u
class(u$res)
class(u$model)
test(u$model)
traceback()
simple.glht(LinearModel.3,'V2', corr='Bonferroni', level=0.95)
traceback()
library(devtools)
install()
library(RcmdrPlugin.NMBU)
simple.glht(LinearModel.1,'V2', corr='Bonferroni', level=0.95)
traceback()
installed.packages()["mixlm",]
simple.glht(LinearModel.1,'V2', corr='Bonferroni', level=0.95)
simple.glht(LinearModel.1,'V3', corr='Bonferroni', level=0.95)
Dataset$V1 <- rnorm(9)
Dataset$V1 <- rnorm(12)
lmm <- lm(V1 ~ V2*V3, data=Dataset)
simple.glht(LinearModel.1,'V3', corr='Bonferroni', level=0.95)
simple.glht(LinearModel.1,'V2', corr='Bonferroni', level=0.95)
simple.glht(LinearModel.1,'V2:V3', corr='Bonferroni', level=0.95)
simple.glht(LinearModel.1,'V2:V3', corr='Fisher', level=0.95)
simple.glht(LinearModel.1,'V3', corr='Fisher', level=0.95)
simple.glht(LinearModel.1,'V2', corr='Fisher', level=0.95)
check(document = FALSE)
build()
build(document = FALSE)
build(path = "H:/Documents/Subversion/SVN")
check(document = FALSE)
install()
hjelp()
build(path = "H:/Documents/Subversion/SVN")
check()
check(document = FALSE)
build(path = "H:/Documents/Subversion/SVN")
library(RcmdrPlugin.NMBU)
library(devtools)
build_vignettes()
build()
build(path = "H:/Documents/Subversion/SVN")
library(RcmdrPlugin.NMBU)
4^9
4^10
library(devtools)
check()
check(document = FALSE)
check(document = FALSE)
build(document = FALSE)
build(path = "H:/Documents/Subversion/SVN/")
install(document = FALSE)
library(RcmdrPlugin.NMBU)
url("http://repository.umb.no/R")
url("http://repository.umb.no/R/documents/R_Commander.pdf")
.onAttach()
RcmdrPlugin.NMBU:::.onAttach()
library("RcmdrPlugin.NMBU", lib.loc="C:\\R\\Library")
detach("package:RcmdrPlugin.NMBU", unload=TRUE)
library("RcmdrPlugin.NMBU", lib.loc="C:\\R\\Library")
install(document = FALSE)
library(devtools)
install(document = FALSE)
view("http://repository.umb.no/R")
View("http://repository.umb.no/R")
View(url("http://repository.umb.no/R"))
download.file("http://repository.umb.no/R/documents/R_Commander.pdf")
build(path = "H:/Documents/Subversion/SVN/")
install.packages("mixlm", type="source")
library(RcmdrPlugin.NMBU)
Commander()
library(RcmdrPlugin.NMBU)
